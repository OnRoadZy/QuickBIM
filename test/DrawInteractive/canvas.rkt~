;#lang racket

;(require racket/gui)

(require "interactive-data.rkt"
         "draws.rkt")

(provide interactive-canvas%
         reset-interactive-line)

;扩展控件类：======================
;扩展画布类：
(define interactive-canvas%
  (class canvas%
    ;重定义鼠标事件：----------------------------------
    (define/override (on-event event) ;mouse-event%
      (let ([type (send event get-event-type)])
        (cond
          ;点击左键：
          [(equal? type 'left-down)
           (click-left-button event)]
          ;点击右键：
          [(equal? type 'right-down)
           (click-right-button event)]
          ;把鼠标位置显示在状态栏：
          [else (show-mouse-pos event)])))

    ;重定义键盘事件：---------------------------------
    (define/override (on-char event) ;key-event%
      (let ([key (send event get-key-code)])
        (cond
          ;为命令字符:
          [(interactive-char? key)
           (add-str-to-interactive-line
            (string key))]
          ;Esc键：
          [(equal? key 'escape)
           (escape-interactive)]
          ;Backspace键:
          [(equal? key #\backspace)
           (backspace-interactive-line)]
          ;回车:
          [(or (equal? key #\return )
               (equal? key 'numpad-enter ))
           (enter-interactive)])))

    (super-new)))

;处理鼠标事件函数：=============================
;处理鼠标左键事件：-----------------------------
(define (click-left-button event)
  void)

;处理鼠标右键事件：----------------------------
(define (click-right-button event)
  void)

;处理鼠标其它事件：----------------------------
;在状态栏坐标区显示鼠标位置：
(define (show-mouse-pos event)
  (send status/mouse-position set-label
        (get-pos-from-event event)))

;从鼠标事件取得鼠标位置：
(define (get-pos-from-event event)
  (format "~a,~a"
          (send event get-x)
          (send event get-y)))

;处理键盘事件函数：==============================
;添加字符串到交互行：
(define (add-str-to-interactive-line str)
  (send interactive-line set-label
        (string-append
         (send interactive-line get-label)
         str)))

;回退交互行文本：
(define (backspace-interactive-line)
  (let* ([str (send interactive-line get-label)]
         [ls-str (regexp-split #rx"：" str)]
         [len (string-length
               (list-ref ls-str 1))])
    (when (> len 0)
      (send interactive-line set-label
            (substring str 0 (- (string-length str) 1))))))

;放弃会话：
(define (escape-interactive)
  ;重置交互环境：
  (reset-interactive-context)
  ;添加提示放弃信息:
  (when (non-empty-string? (get-answer-from-interactive-line))
    (add-str-to-interactive-line "*取消*"))
  ;保存交互行信息:
  (save-interactive-line)
  ;重置交互行:
  (reset-interactive-line))

;确认会话:
(define (enter-interactive)
  (let ([str (get-answer-from-interactive-line)])
    (if (interactive-context-reset?) ;已重置交互环境
        ;为命令
        (when (command-str? str)
          (interactive/draw str)) ;进入命令相应交互
      ;在交互状态下：
      (let ([style ;取得会话提示需求值类型
             (get-prompt-style
              (get-current-int))])
        ;为坐标：
        (cond
          [(equal? style 'point)
           (begin
             (save-point str)
             (next-interactive))])))))

;通用函数=======================================
;检查键盘字符是否为会话字符(在会话行允许输入):
;包含:字符、数字、括号、@、逗号(,)、负号(-),角号(<)
(define (interactive-char? key)
  (and (char? key)
       (or (char-alphabetic? key)
           (char-numeric? key)
           (char=? key #\()
           (char=? key #\))
           (char=? key #\<)
           (char=? key #\,)
           (char=? key #\.)
           (char=? key #\-)
           (char=? key #\@))))

;为命令字串？
(define (command-str? str)
  (string=?
   (car (regexp-match #px"[0-9a-z]*" str))
   str))

;保存交互行内容:
(define (save-interactive-line)
  (when (non-empty-string?
         (get-answer-from-interactive-line))
    (send interactive-list set-value
          (format "~a\n~a"
                  (send interactive-list get-value)
                  (send interactive-line get-label)))))

;取得交互回答字符串：
(define (get-answer-from-interactive-line)
  (string-trim
   (list-ref
    (string-split
     (send interactive-line get-label)
     "：")
    1)))

;重置交互行:
(define (reset-interactive-line)
  (send interactive-line set-label "命令："))

;进行下一段交互：
(define (next-interactive)
  (save-interactive-line)
  (add-current-int)
  (if
   ;当前会话不是最后一个会话：
   (< (get-current-int)
      (get-prompt-number))
   (show-prompt)
   (end-interactive)))

;结束交互：
(define (end-interactive)
  ;保存图形数据：
  (draws-append cur-draw)
  ;显示结束语：
  (show-end-str))

;现实会话结束语：
(define (show-end-str)
  (send interactive-list set-label
        (get-end-str)))

;进行绘图交互：
(define (interactive/draw str)
  ;设置交互环境：
  (when (set-interactive-context str)
    ;设置当前绘图类型：
    (init-cur-draw)
    ;保存命令：
    (save-interactive-line)
    ;显示交互提示：
    (show-prompt)))

;显示交互提示：
(define (show-prompt)
  (send interactive-line set-label
        (get-prompt (get-current-int))))

;